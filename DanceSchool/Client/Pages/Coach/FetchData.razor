@page "/coach"
@inject HttpClient client
@inject IJSRuntime js

<h3>Trenerzy</h3>

    <div class="row justify-content-end">
        <a class="btn btn-outline-info" href="coach/create"><i class="oi oi-plus"></i> Dodaj</a>
    </div>
<br>
@if (coaches == null)
{
    <text>Ładowanie danych...</text>
}
else if (coaches.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Imię trenera</th>
                <th>Nazwisko trenera</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{int i = 1;}
            @foreach (Coach coach in coaches)
            {
                <tr>
                    <td>@i</td>
                    <td>@coach.Name</td>
                    <td>@coach.LastName</td>
                    <td>
                        <a class="btn btn-outline-primary" href="coach/edit/@coach.Id">Edytuj</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(coach.Id))">Usuń</button>
                        <a class="btn btn-secondary" href="coach/@coach.Id">Szczegóły</a>
                    </td>
                </tr>
                i++;
            }
        </tbody>
    </table>
}
@code {
    Coach[] coaches { get; set; }
    protected override async Task OnInitializedAsync()
    {
        coaches = await client.GetFromJsonAsync<Coach[]>("api/coach");
    }
    async Task Delete(int coachId)
    {
        var coach = coaches.First(x => x.Id == coachId);
        if (await js.InvokeAsync<bool>("confirm", $"Czy na pewno chcesz usunąć trenera: {coach.Name}?"))
        {
            await client.DeleteAsync($"api/coach/{coachId}");
            await OnInitializedAsync();
        }
    }
}